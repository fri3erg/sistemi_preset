c:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

int main(int argc, char *argv[])
{
	if( argc < 2 ) {
		perror( "Bad usage! u have to specify pipe name\n" );
		return -1;
	}

	FILE *mypipe;
}


if(  shit< 0 ){
		perror( "Cannot create \n" );
	}

pipe:
mkfifo(myname, 0666)
mypipe = fopen( myname, "r" );
len = getline(&buf, &buflen, mypipe ) > 0
unlink(myname);
fclose(mypipe);

fork:

switch (pid = fork()) {
    case -1:
      exit(1);
      break;
    case 0:
      figlio
      break;
    default:
      if (waitpid(pid, &wstatus, 0) == -1)
        exit(1);
      ret_val = WEXITSTATUS(wstatus);    WIFSIGNALED(wstatus)
      break;
    }

dir = opendir(path);
entry = readdir(dir)) != NULL
entry->d_name
entry->d_type


(file.st_ino == targetFileDescription.st_ino)
S_ISLNK(file.st_mode)
(S_ISREG(file.st_mode)
 

close(creat(filePath, 0666));


sigset_t mask;
sigemptyset(&mask);
    sigaddset(&mask, SIGUSR1);
    sigaddset(&mask, SIGUSR2);
if (sigprocmask(SIG_BLOCK, &mask, NULL) == -1)
			handle_error("sigprocmask");
	
sfd = signalfd(-1, &mask, 0);
		if (sfd == -1)
			handle_error("signalfd");
if (fdsi.ssi_signo == SIGUSR1) {


pid_t mainProc = getpid();
kill(mainProc, SIGUSR1);


struct utimbuf newTime;
newTime.actime = fileStat.st_atime;
newTime.modtime = fileStat.st_mtime;
utime(filePath, &newTime);


char *new_path = (char *)malloc(length)

inotify:
  // Inizializziamo l'istanza di inotify
  fd = inotify_init();

  // Controlliamo se l'istanza è stata creata correttamente
  if (fd < 0) perror("inotify_init");

  // Aggiungiamo alla watch list la directory exec da controllare
  wd = inotify_add_watch(fd, dir, IN_CREATE | IN_MOVE);

  // Chiamiamo read che rimane bloccato finchè non si verificano degli eventi 
  numberOfEvents = read(fd, buffer, EVENT_BUF_LEN);

  // Controlliamo se si sono verificati errori
  if (numberOfEvents < 0) perror("read");

  // A questo punto se non ci sono stati errori numberOfEvents 
  // tiene il conto degli eventi avvenuti
  // e il buffer contiene gli eventi 
  int i=0;
  while (i < numberOfEvents) {
    struct inotify_event* event = (struct inotify_event*) &buffer[i];
    if ((event->mask & IN_CREATE) || (event->mask & IN_MOVE)) {
      if (!(event->mask & IN_ISDIR)) {
  inotify_rm_watch(fd, wd);

		while (i < numberOfEvents) {
			// Si può accedere ai campi dell'event per ricavare    informazioni utili
			struct inotify_event* event = (struct inotify_event*) &buffer[i];
			if (event->mask & IN_DELETE) {
			i += EVENT_SIZE + event->len;

inotify_rm_watch(fd, wd);

// Puntatore alla variabile condivisa
int *val;

// I due file descriptor utilizzati per i semafori
int eventfdProd;
int eventfdCons;

// Buffer per read e write
uint64_t buf;
 pthread_t consumer;
  pthread_t producer;

  // Inizializziamo i semafori per produttore e consumatore
  // Il consumatore parte con valore 0
  // in quanto non è ancora stato prodotto nulla
  eventfdCons = eventfd(0, EFD_SEMAPHORE);
  
  // Il produttore parte con valore 1 in  
  // quanto è il primo a dover partire
  eventfdProd = eventfd(1, EFD_SEMAPHORE);

  // Creiamo i due thread
  int succesfullStartProd;
  int succesfullStartCons;

  succesfullStartProd = pthread_create(&producer, NULL, producerFunction, NULL);
  if (succesfullStartProd != 0) printf("Error during creation of producer thread\n");

  succesfullStartCons = pthread_create(&consumer, NULL, consumerFunction, NULL);
  if (succesfullStartCons != 0) printf("Error during creation of consumer thread\n");

  pthread_join(producer, NULL);
  pthread_join(consumer, NULL);

if (read(eventfdProd, &buf, sizeof(buf)) > 0
write(eventfdCons, &buf, sizeof(buf));





final:
for (int i = 0; i < argc - 1; i++) {
    free(argo[i]);
  }


python:

import os
import sys
import subprocess

if name == "main":

if len(sys.argv) < 2:
sys.exit(1)

files:
for (dirpath, dirnames, filenames) in os.walk(sd):
os.makedirs(dstdir, exist_ok=True)
df.write(sf.read())
for filename in os.listdir(path):
os.path.isdir(fullpath)
filetype=magic.from_file(fullpath)
os.path.getsize(fullpath)
os.access(filep, os.X_OK)
subprocess.call(filep, shell=True)
pwd.getpwuid(os.stat(path).st_uid).pw_name
os.getlogin()
open(path) as f:
for line in f:
tokens = line.split()
if data[filename] is None:
sorted(data.items(), reverse=True)


 subTree.setdefault(file, [])
            subTree[file].append(dirPath)

    # Ordiniamo i file in ordine alfabetico
    subTree = sortDictionary(subTree)
    # Stampiamo il sottoalbero con i file ordinati
    files = subTree.keys()
    for file in files:


os.path.getmtime(os.path.join(dirPath, file))

info = subprocess.run(['file', filepath], capture_output=True, text=True)

fileName, fileExt = os.path.splitext(file)
os.system(f"ex -n '+norm!gg=G' +wq {path}")

os.system(f'{string}')

    dirEntries = os.scandir(dirPath)
 pathname.setdefault(entry.inode(), [])
      pathname[entry.inode()].append(os.path.join(dirPath, entry.name))



shell:

